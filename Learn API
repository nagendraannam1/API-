Http Protocol:- 

Basically, HTTP is a TCP/IP based communication protocol, that is used to deliver data (HTML files, image files, query results, etc.) on the World Wide Web.

HTTP Methods: 
GET, POST,PUT,UPDATE,DELETE 

HTTP Status Codes: 
Information Responses(100 -199) : 
1xx:  informational response, request was received, continuing process
100 Continue: The client can continue with the request as long as it doesn't get rejected.
101 : Switching Protocols: The server is switching protocols.
102  : server has received and is processing the request, but
no response is available yet.


Succesfull Response(200 --299): 

2xx: Success, request was successfully received, understood, and accepted. 
200 OK: The request succeeded
201:    a new resource was created as a result. This is
typically the response sent after POST requests, or some PUT requests.
202 Accepted: Request accepted for processing, but in progres

203 : Non-Authoritative Information: The information in the entity header is not from an
original source but a third-party. 
204: No Content: Response with status code and header but no response body
206 Partial Content: Response with partial data as specified in Range header



Redirection Responses(300 --399): 
 
  3xx:  Redirection,  further action needed in order to complete the request.
  300 Multiple Choices:  Response with a list for the user to select and go to a location. 
  301 Moved Permanently:  Requested page moved to a new url. 
  302 Found: Requested page moved to a temporary new URL
  
  

Client Error response(400 --499) :

4xx Client Error, request contains bad syntax or cannot be fulfilled
400 Bad Request: Server unable to understand the request
401 Unauthorized: Requested content needs authentication credentials
403 Forbidden: Access is forbidden
404 Not Found: Server is unable to find the requested page
405 Method Not Allowed: Method in the request is not allowed. 


Internal server Error (500 -- ): 
500 internal Server error : This code indicates that server has encountered. it doesn't know how to handle this situation. 

502 Bad Gateway : This error response indicates that the server while acting as a gateway. obtain the answer request response. recevied the in correct response. 


Http response body : 

JSON Path
XML
XPATH Path



Assertions:  Write sample Assetions like status codes 200 ok : 

pm.test("Check the status code  200", function () {
    pm.response.to.have.status(200);
});

Javascript Programming : 

var jsonData=pm.response json( );
var token=JsonData.token;
pm.collectionvariables.set("token:"token);


How to get the token  :
var JsonData=pm.response Json( );
var token=pm.collectionvariables.get(token);
console.log("token:"+token); 


To get the bookingID : 

JsonData=pm.response Json( );
var bookingId=JsonData.bookingId;
pm.collectionvariables.set("bookingId:"bookingId);

-------------------->>>>>>>>>

Var JSonData=pm.response Json( );
Var bookingId=pm.collectionvariables.get(bookingId);
console.log("bookingId:"+bookingId);

To update the data sample program where to written ?

POST method Prerequest Script : 

var initprice=234;
pm.collectionvariables.set("initprice:"initprice);

PUT Method Prerequest Script : 

var initprice=pm.collectionvariables.get("initprice");
var increaseprice=initprice+100;
var presentprice=pm.collectionvariables.set("increseprice:"increaseprice);

Same method to get the price: Test script Wrirtten : 

var jsonData=pm.response json( );
var presentprice=jsonData.presentprice;
var presentprice=pm.collectionvariables.get("presentprice");
console.log("presentprice:"+presentprice) ;


Assertions:-  Verifying the actual value and expected values using the assertions. 

Write the assrtions verifying the objects . 
EX:-  pm.test("checking the objects equality", ( )=>{
        let "data"={
            "subject": "api_testing"
            }
         let "data2"={
             "subject2":"postman"
             }
             pm.expect(data).to.be.equal(data2); 
             
             
  =====>  Write the Asertions from Status codes: 
       pm.test("status code checking",function( )=>{
        pm.response.to.have.status(403);
        });
        });
  =====>checking from multiple codes: 
        pm.test("status code checking",function( )=>{
          pm.expect(pm.response.code.get).to.be.oneOf([201,200]); 
          });
          });
          
   =====>Checking the header :
           pm.test("status header checking",function( )=>{ 
            pm.response.header.status( );
            });
            });
            
   ======> Get the header information to be equal or not 
              pm.test("header checking",function( )=>{
                pm.expect(pm.response.header.get("headertype").to.be.equal("headervalue"); 
                });
                });
                
   ======> Checking the response time . 
               pm.test(" checking the response time ",function( )=>{
                  pm.expect(pm.response.responsetime()).to.be.above(1000); 
                  });
                  });
   ========> Write the Cookie assertion . 
                 pm.test("checking the cookie assertion",function( )=>{
                   pm.expect(pm.cookies.get("keyproperty")).to.be.equal("value"); 
                   });
                   });
   =========> Check if a cookie is present in the response : 
                   pm.test(" checking cookie value ",function( )=>{
                     pm.expect(pm.cookies.has("sessionid").to.be.true; 
                     });
                     });
                     
                       pm.test(" checking cookie content type and  value ",function( )=>{
                     pm.expect(pm.cookies.get("keysproperty")).to.be.eql("value"); 
                     });
                     })
                     
  Asserting a response value against a variable
Check if a response property has the same value as a variable (in this case an environment variable):

pm.test("Response property matches environment variable", function () {
  pm.expect(pm.response.json().name).to.eql(pm.environment.get("name"));
});                   
                     
                     
                                
                     
  Asserting a value type
Test the type of any part of the response:


/* response has this structure:
{
  "name": "Jane",
  "age": 29,
  "hobbies": [
    "skating",
    "painting"
  ],
  "email": null
}
*/
const jsonData = pm.response.json();
pm.test("Test data type of the response", () => {
  pm.expect(jsonData).to.be.an("object");
  pm.expect(jsonData.name).to.be.a("string");
  pm.expect(jsonData.age).to.be.a("number");
  pm.expect(jsonData.hobbies).to.be.an("array");
  pm.expect(jsonData.website).to.be.undefined;
  pm.expect(jsonData.email).to.be.null;
});



Testing response body
Check for particular values in the response body:

pm.test("Person is Jane", () => {
  const responseJson = pm.response.json();
  pm.expect(responseJson.name).to.eql("Jane");
  pm.expect(responseJson.age).to.eql(23);
});

// Checking the array type of object. 

pm.test("Person is Jane", () => {
  const responseJson = pm.response.json();
  pm.expect(responseJson.data[0].name).to.eql("Jane");
  pm.expect(responseJson.data[1].age).to.eql(23);
});




